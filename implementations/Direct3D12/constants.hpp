#ifndef AGPU_D3D12_CONSTANTS_HPP
#define AGPU_D3D12_CONSTANTS_HPP

#include "device.hpp"

namespace AgpuD3D12
{

inline D3D12_HEAP_TYPE mapHeapType(agpu_memory_heap_type type)
{
    switch(type)
    {
    default:
    case AGPU_MEMORY_HEAP_TYPE_HOST_TO_DEVICE:
    case AGPU_MEMORY_HEAP_TYPE_HOST:
        return D3D12_HEAP_TYPE_UPLOAD;
    case AGPU_MEMORY_HEAP_TYPE_DEVICE_LOCAL:
        return D3D12_HEAP_TYPE_DEFAULT;
    case AGPU_MEMORY_HEAP_TYPE_DEVICE_TO_HOST:
        return D3D12_HEAP_TYPE_READBACK;
    case AGPU_MEMORY_HEAP_TYPE_CUSTOM:
        return D3D12_HEAP_TYPE_CUSTOM;
    }
}

inline D3D12_RESOURCE_STATES mapBufferUsageToResourceState(agpu_memory_heap_type heapType, agpu_buffer_usage_mask usageModes)
{
    uint32_t result = 0;
	switch (heapType)
	{
	case AGPU_MEMORY_HEAP_TYPE_HOST_TO_DEVICE:
	case AGPU_MEMORY_HEAP_TYPE_HOST:
		return D3D12_RESOURCE_STATE_GENERIC_READ;
	case AGPU_MEMORY_HEAP_TYPE_DEVICE_TO_HOST:
		return D3D12_RESOURCE_STATE_COPY_DEST;
	default:
		break;
	}

    if((usageModes & AGPU_COPY_DESTINATION_BUFFER) != 0)
        result |= D3D12_RESOURCE_STATE_COPY_DEST;
    if((usageModes & AGPU_COPY_SOURCE_BUFFER) != 0)
        result |= D3D12_RESOURCE_STATE_COPY_SOURCE;
    if((usageModes & (AGPU_ARRAY_BUFFER | AGPU_UNIFORM_BUFFER)) != 0)
        result |= D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER;
    if((usageModes & AGPU_UNIFORM_TEXEL_BUFFER) != 0)
        result |= D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;
    if((usageModes & AGPU_ELEMENT_ARRAY_BUFFER) != 0)
        result |= D3D12_RESOURCE_STATE_INDEX_BUFFER;
    if((usageModes & (AGPU_DRAW_INDIRECT_BUFFER | AGPU_COMPUTE_DISPATCH_INDIRECT_BUFFER)) != 0)
        result |= D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT;
    if((usageModes & (AGPU_STORAGE_BUFFER | AGPU_STORAGE_TEXEL_BUFFER)) != 0)
        result |= D3D12_RESOURCE_STATE_UNORDERED_ACCESS;

    return D3D12_RESOURCE_STATES(result);
}

inline D3D12_RESOURCE_STATES mapTextureUsageToResourceState(agpu_memory_heap_type heapType, agpu_texture_usage_mode_mask usageModes)
{
    switch (heapType)
    {
    case AGPU_MEMORY_HEAP_TYPE_HOST_TO_DEVICE:
    case AGPU_MEMORY_HEAP_TYPE_HOST:
        return D3D12_RESOURCE_STATE_GENERIC_READ;
    case AGPU_MEMORY_HEAP_TYPE_DEVICE_TO_HOST:
        return D3D12_RESOURCE_STATE_COPY_DEST;
    default:
        break;
    }
    
    switch(int(usageModes))
    {
    case AGPU_TEXTURE_USAGE_NONE: return D3D12_RESOURCE_STATE_COMMON;
    case AGPU_TEXTURE_USAGE_SAMPLED: return D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;
    case AGPU_TEXTURE_USAGE_COLOR_ATTACHMENT: return D3D12_RESOURCE_STATE_RENDER_TARGET;
    case AGPU_TEXTURE_USAGE_DEPTH_ATTACHMENT:
    case AGPU_TEXTURE_USAGE_STENCIL_ATTACHMENT:
    case AGPU_TEXTURE_USAGE_DEPTH_ATTACHMENT | AGPU_TEXTURE_USAGE_STENCIL_ATTACHMENT:
        return D3D12_RESOURCE_STATE_DEPTH_WRITE;
	case AGPU_TEXTURE_USAGE_COPY_SOURCE: return D3D12_RESOURCE_STATE_COPY_SOURCE;
	case AGPU_TEXTURE_USAGE_COPY_DESTINATION: return D3D12_RESOURCE_STATE_COPY_DEST;
	case AGPU_TEXTURE_USAGE_PRESENT: return D3D12_RESOURCE_STATE_PRESENT;
    case AGPU_TEXTURE_USAGE_STORAGE:
    default: return D3D12_RESOURCE_STATE_UNORDERED_ACCESS;
    }
}
} // End of namespace AgpuD3D12

#endif // AGPU_D3D12_CONSTANTS_HPP
